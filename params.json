{"name":"NSpec","body":"NSpec is a BDD framework for .NET of the xSpec (context/specification) flavor. NSpec is intended to be used to drive development through specifying fine grained and coarse grained behavior. NSpec is heavily inspired by RSpec and built upon the NUnit assertion library.\r\n\r\n# Getting Started\r\n### Write Your First Spec\r\nThis tutorial will walk you through installing NSpec and running a simple spec.\r\n\r\n1. Open Visual Studio 2010.\r\n\r\n2. Ensure that you have NuGet installed. (NuGet only works with VS2010. To use NSpec with VS2008, you must download the binaries zip.)\r\n\r\n3. Create a .Net 4.0 or .Net 3.5 class library project.\r\n\r\n4. Open the Package Manager Console and type the following command: `Install-Package nspec`\r\n\r\n5. After installation completes, create a class with the following code:\r\n\r\n<pre>\r\nusing NSpec;\r\n \r\nclass my_first_spec : nspec\r\n{\r\n    void given_the_world_has_not_come_to_an_end()\r\n    {\r\n        it[\"Hello World should be Hello World\"] = () => \"Hello World\".should_be(\"Hello World\");\r\n    }\r\n}\r\n</pre>\r\n\r\n### Run Your First Spec\r\nNuget placed NSpecRunner.exe in your PATH on the Package Manager Console.\r\n\r\n1. Build the class library.\r\n\r\n2. Run the following command in the Package Manager Console:\r\n\r\n<pre>\r\nNSpecRunner.exe YourClassLibraryName\\bin\\debug\\YourClassLibraryName.dll\r\n\r\nmy first spec\r\n  given the world has not come to an end\r\n    Hello World should be Hello World\r\n\r\n1 Examples, 0 Failed, 0 Pending\r\n</pre>\r\n\r\n# Specifications\r\n<pre>\r\nusing NSpec;\r\n \r\nclass describe_specifications : nspec\r\n{\r\n    void when_creating_specifications()\r\n    {\r\n        //some of these specifications are meant to fail so you can see what the output looks like\r\n        it[\"true should be false\"] = () => true.should_be_false();\r\n        it[\"enumerable should be empty\"] = () => new int[] { }.should_be_empty();\r\n        it[\"enumerable should contain 1\"] = () => new[] { 1 }.should_contain(1);\r\n        it[\"enumerable should not contain 1\"] = () => new[] { 1 }.should_not_contain(1);\r\n        it[\"1 should be 2\"] = () => 1.should_be(2);\r\n        it[\"1 should be 1\"] = () => 1.should_be(1);\r\n        it[\"1 should not be 1\"] = () => 1.should_not_be(1);\r\n        it[\"1 should not be 2\"] = () => 1.should_not_be(2);\r\n        it[\"\\\"\\\" should not be null\"] = () => \"\".should_not_be_null();\r\n        it[\"some object should not be null\"] = () => someObject.should_not_be_null();\r\n        //EXPERIMENTAL - specify only takes a lambda and does \r\n        //its best to make a sentence out of the code. YMMV.\r\n        specify = ()=> \"ninja\".should_not_be(\"pirate\");\r\n    }\r\n    object someObject = null;\r\n}\r\n</pre>\r\n\r\n<pre>\r\ndescribe specifications\r\n  when creating specifications\r\n    true should be false - FAILED - Expected: False, But was: True\r\n    enumerable should be empty\r\n    enumerable should contain 1\r\n    enumerable should not contain 1 - FAILED - Expected: not collection containing 1, But was:...\r\n    1 should be 2 - FAILED - Expected: 2, But was: 1\r\n    1 should be 1\r\n    1 should not be 1 - FAILED - Expected: not 1, But was: 1\r\n    1 should not be 2\r\n    \"\" should not be null\r\n    some object should not be null - FAILED - Expected: not null, But was: null\r\n    ninja should not be pirate\r\n\r\n**** FAILURES ****\r\n\r\nnspec. describe specifications. when creating specifications. true should be false.\r\nExpected: False, But was: True\r\n   at describe_specifications.<when_creating_specifications>b__0() in c:\\Users\\Administrator\\D...\r\n\r\nnspec. describe specifications. when creating specifications. enumerable should not contain 1.\r\nExpected: not collection containing 1, But was: < 1 >\r\n   at describe_specifications.<when_creating_specifications>b__3() in c:\\Users\\Administrator\\D...\r\n\r\nnspec. describe specifications. when creating specifications. 1 should be 2.\r\nExpected: 2, But was: 1\r\n   at describe_specifications.<when_creating_specifications>b__4() in c:\\Users\\Administrator\\D...\r\n\r\nnspec. describe specifications. when creating specifications. 1 should not be 1.\r\nExpected: not 1, But was: 1\r\n   at describe_specifications.<when_creating_specifications>b__6() in c:\\Users\\Administrator\\D...\r\n\r\nnspec. describe specifications. when creating specifications. some object should not be null.\r\nExpected: not null, But was: null\r\n   at describe_specifications.<when_creating_specifications>b__9() in c:\\Users\\Administrator\\D...\r\n\r\n11 Examples, 5 Failed, 0 Pending\r\n</pre>\r\n\r\n# Befores\r\n<pre>\r\nusing NSpec;\r\n \r\nclass describe_before : nspec\r\n{\r\n    void they_run_before_each_example()\r\n    {\r\n        before = () => number = 1;\r\n        it[\"number should be 2\"] = () => (number = number + 1).should_be(2);\r\n        //even though it was incremented in the previous example\r\n        //the before runs again for each spec resetting it to 1\r\n        it[\"number should be 1\"] = () => number.should_be(1);\r\n    }\r\n    int number;\r\n}\r\n</pre>\r\n\r\n<pre>\r\ndescribe before\r\n  they run before each example\r\n    number should be 2\r\n    number should be 1\r\n\r\n2 Examples, 0 Failed, 0 Pending\r\n</pre>\r\n\r\n# Contexts\r\n<pre>\r\nusing NSpec;\r\n \r\nclass describe_contexts : nspec\r\n{\r\n    void describe_Account()\r\n    {\r\n        //contexts can be nested n-deep and contain befores and specifications\r\n        context[\"when withdrawing cash\"] = () =>\r\n        {\r\n            before = () => account = new Account();\r\n            context[\"account is in credit\"] = () =>\r\n            {\r\n                before = () => account.Balance = 500;\r\n                it[\"the Account dispenses cash\"] = () => account.CanWithdraw(60).should_be_true();\r\n            };\r\n            context[\"account is overdrawn\"] = () =>\r\n            {\r\n                before = () => account.Balance = -500;\r\n                it[\"the Account does not dispense cash\"] = () => account.CanWithdraw(60).should_be_false();\r\n            };\r\n        };\r\n    }\r\n    private Account account;\r\n}\r\n</pre>\r\n\r\n<pre>\r\ndescribe contexts\r\n  describe Account\r\n    when withdrawing cash\r\n      account is in credit\r\n        the Account dispenses cash\r\n      account is overdrawn\r\n        the Account does not dispense cash\r\n\r\n2 Examples, 0 Failed, 0 Pending\r\n</pre>\r\n\r\n# Pendings\r\n<pre>\r\nusing NSpec;\r\n \r\nclass describe_pending : nspec\r\n{\r\n    void when_creating_pending_specifications()\r\n    {\r\n        it[\"pending spec\"] = todo;\r\n        //or just add an 'x' at the beginning of a specification that isn't quite ready\r\n        xit[\"\\\"\\\" should be \\\"something else\\\"\"] = () => \"\".should_be(\"something else\");\r\n    }\r\n}\r\n</pre>\r\n\r\n<pre>\r\ndescribe pending\r\n  when creating pending specifications\r\n    pending spec - PENDING\r\n    \"\" should be \"something else\" - PENDING\r\n\r\n2 Examples, 0 Failed, 2 Pending\r\n</pre>\r\n\r\n# Act\r\n<pre>\r\nusing NSpec;\r\n \r\nclass describe_batman_sound_effects_as_text : nspec\r\n{\r\n    void they_are_loud_and_emphatic()\r\n    {\r\n        //act runs after all the befores, and before each spec\r\n        //declares a common act (arrange, act, assert) for all subcontexts\r\n        act = () => sound = sound.ToUpper() + \"!!!\";\r\n        context[\"given bam\"] = () =>\r\n        {\r\n            before = () => sound = \"bam\";\r\n            it[\"should be BAM!!!\"] = \r\n                () => sound.should_be(\"BAM!!!\");\r\n        };\r\n        context[\"given whack\"] = () =>\r\n        {\r\n            before = () => sound = \"whack\";\r\n            it[\"should be WHACK!!!\"] = \r\n                () => sound.should_be(\"WHACK!!!\");\r\n        };\r\n    }\r\n    string sound;\r\n}\r\n</pre>\r\n\r\n<pre>\r\ndescribe batman sound effects as text\r\n  they are loud and emphatic\r\n    given bam\r\n      should be BAM!!!\r\n    given whack\r\n      should be WHACK!!!\r\n\r\n2 Examples, 0 Failed, 0 Pending\r\n</pre>\r\n\r\n# Class Level\r\n<pre>\r\nusing NSpec;\r\n \r\nclass describe_class_level : nspec\r\n{\r\n    //before, act, and it can also be declared at the class level like so\r\n    void before_each()\r\n    {\r\n        sequence = \"arrange, \";\r\n    }\r\n    void act_each()\r\n    {\r\n        sequence += \"act\";\r\n    }\r\n \r\n    //prefixing a method with \"it_\" or \"specify_\"\r\n    //will tell nspec to treat the method as an example\r\n    void specify_given_befores_and_acts_run_in_the_correct_sequence()\r\n    {\r\n        sequence.should_be(\"arrange, act\");\r\n    }\r\n \r\n    string sequence;\r\n}\r\n</pre>\r\n\r\n<pre>\r\ndescribe class level\r\n  specify given befores and acts run in the correct sequence\r\n\r\n1 Examples, 0 Failed, 0 Pending\r\n</pre>\r\n\r\n# Inheritance\r\n<pre>\r\nusing NSpec;\r\n \r\nclass given_the_sequence_continues_with_2 : given_the_sequence_starts_with_1\r\n{\r\n    void before_each()\r\n    {\r\n        sequence += \"2\";\r\n    }\r\n    void given_the_sequence_continues_with_3()\r\n    {\r\n        before = () => sequence += \"3\";\r\n \r\n        //the befores run in the order you would expect\r\n        it[\"sequence should be \\\"123\\\"\"] =\r\n            () => sequence.should_be(\"123\");\r\n    }\r\n}\r\n \r\nclass given_the_sequence_starts_with_1 : nspec\r\n{\r\n    void before_each()\r\n    {\r\n        sequence = \"1\";\r\n    }\r\n    protected string sequence;\r\n}\r\n</pre>\r\n\r\n<pre>\r\ngiven the sequence starts with 1\r\n  given the sequence continues with 2\r\n    given the sequence continues with 3\r\n      sequence should be \"123\"\r\n\r\n1 Examples, 0 Failed, 0 Pending\r\n</pre>\r\n\r\n# Exceptions\r\n<pre>\r\nusing System;\r\nusing NSpec;\r\n \r\nclass describe_expected_exception : nspec\r\n{\r\n    void given_a_null_string()\r\n    {\r\n        it[\"should throw null-ref\"] =\r\n            expect<NullReferenceException>(() => nullString.Trim());\r\n    }\r\n    string nullString = null;\r\n}\r\n</pre>\r\n\r\n<pre>\r\ndescribe expected exception\r\n  given a null string\r\n    should throw null-ref\r\n\r\n1 Examples, 0 Failed, 0 Pending\r\n</pre>","tagline":"BDD style testing in .Net","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}